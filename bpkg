#!/bin/bash

#echo -e "|[ type ] 	            layout  |"

##################################################################################
#	Bomj PacKaGe tool ver 0.2
#  TODO: MAKE THIS SHIT
##################################################################################
# colors

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

finestr=''${GREEN}' fine '${NC}''
failstr=''${RED}' error '${NC}''
warnstr=''${YELLOW}' warn '${NC}''

##################################################################################
# bomj tools

purgebpkg() {
	response=0 
	while [ $response = 0 ] ; do
    echo -e "Are you sure (${RED}Y${NC}/${GREEN}N${NC})"
    read -rp "?? " response
    if [[ "$response" =~ ^([yY][eE][sS]|[yY])$ ]]; then
		echo -e "#####################|removing|#####################${RED}"
		rm -rvf /var/bpkg /etc/bpkg* 
		rm -rf /bin/bpkg
		echo -e "${NC}####################################################"
    elif [[ "$response" =~ ^([nN][oO]|[nN])$ ]]; then
        exit 0
    else 
        response="0"
    fi
	done
}

exitdb() {
	rm -f /var/bpkg/lock
	exit 1
}

installcheck() {
	echo -e "|[${failstr}] 	     reinstall bpkg |"
	exit 0
}

searchfunc() {
	source /etc/bpkg.d/func/system/searchfunc
}

debug() {
	echo -e "${RED}RUNNING DEBUG${NC}"
	case ${input[1]} in
		'searchfunc')
			searchfunc ${input[2]} ${input[3]}
			echo "path : " ${searchfuncoutpath[@]}
			echo "name : " ${searchfuncoutname[@]}
			echo "ver  : " ${searchfuncoutver[@]}
		;;
	esac
}
##################################################################################
# repo
sync() {
	source /etc/bpkg.d/func/sync

}

search() {
	source /etc/bpkg.d/func/search
}
# pkgs
update() {
	sync
	echo -e 'update'
}
purge() {
	touch /var/bpkg/lock > /dev/null
	echo -e 'purge'
}

localinstall() {
	source /etc/bpkg.d/func/localinstall
}

install() {
	touch /var/bpkg/lock > /dev/null

}

list() {
	touch /var/bpkg/lock > /dev/null
	echo -e 'list'
}
##################################################################################
# help
helpkg() {
	echo -e \
	 " |[ help ] -S --sync     | synchronize repo     |\n" \
	 "|[ help ] -D --delete   | delete pkgs          |\n" \
	 "|[ help ] -I --install  | install pkgs         |\n" \
	 "|[ help ] -L --list     | list installed pkgs  |\n" \
	 "|[ help ] -F --find     | find pkgs in repo    |\n" \
	 "|[ help ] -Li --local   | install pkg from bkg |\n" \
	 "|[ help ] -U --upgrade  | upgrade your system  |\n" \
	 "|[ help ] --purge       | remove bpkg from pc  |\n" 
	exit 0 
}
versionpkg() {
	echo "======================================"
	echo -e "=   bpkg ver 0.2 '\033[0;36mBetta splendens\033[0m'  ="
	echo "======================================"
	exit 0 
}
input=("$@")

if [[ "$input" =~ ^(-h|--help)$ ]] ; then
	helpkg
elif [[ "$input" =~ ^(-v|--version)$ ]] ; then
	versionpkg
fi

if [ -f /var/bpkg/lock ]; then
	echo -e "|[${failstr}] 	    lock file found |"
	exit 1
fi

if [ "$EUID" -ne 0 ]; then 
	
	echo -e "|[${failstr}] 	  permission denied |"
	exitdb
fi

if [[ "$input" =~ ^(--setup)$ ]] ; then
	if [ -f ./pc ]; then
		source ./func/setup
	fi
fi

if [ -f /bin/bpkg ] || [ -d /var/bpkg ] || [ -d /etc/bpkg ]; then
	echo -e "|[${finestr}] 	            started |"
else
	installcheck
fi

case ${input[0]} in
	'-S'|'--sync')
		sync
		exitdb
	;;
	'-D'|'--delete')
		purge
		exitdb
	;;
	'-I'|'--install')
		install
		exitdb
	;;
	'-L'|'--list')
		list
		exitdb
	;;
	'-F'|'--find')
		search
		exitdb
	;;
	'-U'|'--upgrade')
		update
		exitdb
	;;
	'--debug')
		debug
	;;
	'--purge')
		purgebpkg
	;;
	'-Li'|'--local')
		filetoinstall=${input[1]}
		localinstall
		exitdb
	;;
	'')
		echo -e "no operation specified"
	;;
	*)
		echo -e "|[${failstr}] 	     unknown option || $input |"
	;;
esac
